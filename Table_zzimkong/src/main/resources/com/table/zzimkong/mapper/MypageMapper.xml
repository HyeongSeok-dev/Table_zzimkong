<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.table.zzimkong.mapper.MypageMapper">

	<!-- 회원정보 조회 - SELECT -->
	<select id="selectMypage"  resultType="mypage">
	SELECT *
	FROM user
	WHERE user_id = #{user_id}
	</select>
	
	<!-- 닉네임 중복확인 - SELECT -->
	<select id="selectUserNick"  resultType="mypage">
	SELECT *
	FROM user
	WHERE user_nick = #{user_nick}
	</select>
	
	<!-- 회원정보 수정 - UPDATE -->
	<!-- @Param 어노테이션을 통해 파라미터 이름을 지정했으므로 #{파라미터명.xxx} 형식으로 객체 접근 -->
	<!-- 단, 새 패스워드(newPasswd)는 null 또는 널스트링이 아닐 경우에만 변경 -->
	<update id="updateMypage">
    UPDATE user
    SET
        user_nick = #{mypage.user_nick}
        , user_email = CONCAT(#{mypage.user_email1}, '@', #{mypage.user_email2}) -- user_email1, user_email2 문자열 결합
        <!-- 새 패스워드(newPasswd) 존재 여부에 따라 변경 여부 결정 -->
        <!-- 주의! 비교에 사용될 파라미터는 #{} 제외하고 표현 -->
        <if test="user_passwd1 != null and !user_passwd1.equals('')">
            , user_passwd = #{user_passwd1}  -- 새 패스워드 존재할 경우 기존 패스워드 변경
        </if>
        <if test="mypage.user_img != null and !mypage.user_img.equals('')">
			, user_img = #{mypage.user_img}
        </if>
    WHERE
        user_id = #{mypage.user_id}
	</update>
	
	<!-- 예약내역 조회 - SELECT -->
	<select id="selectResList" resultType="map">
		SELECT *
		FROM mypage_view
		WHERE user_idx = #{sIdx}
		ORDER BY res_date ASC, res_time ASC
		LIMIT 5
	</select>
	
	<!-- 예약내역 상세조회 - SELECT -->
	<select id="selectResList2" resultType="map">
		SELECT *
		FROM mypage_view
		WHERE user_idx = #{sIdx}
		ORDER BY res_date ASC, res_time ASC
		LIMIT
			#{startRow}
			, #{listLimit}
	</select>
	
	<!-- 예약내역 전체 개수 조회  -->
	<select id="selectResList2Count" resultType="int">
		SELECT COUNT(*)
		FROM mypage_view
	</select>
	
	<!-- 예약취소버튼 클릭시 취소 - UPDATE -->
	<update id="updateMyResCancel">
		UPDATE reservation 
		SET res_status = 2
		WHERE res_idx = #{res_idx}
	</update>
	
	<!-- 나의내역 북마크 목록 조회 - SELECT -->
	<select id= "selectBookmarkList" resultType="bookmark">
		SELECT bookmark.user_idx, bookmark.com_id, company.com_name, company.com_img
        FROM bookmark
        JOIN company ON bookmark.com_id = company.com_id
        WHERE bookmark.user_idx = #{sIdx}
        ORDER BY com_name ASC
        LIMIT 3
	</select>

	<!-- 북마크 목록 상세조회 - SELECT -->
	<select id= "selectBookmarkList2" resultType="bookmark">
		SELECT bookmark.user_idx, bookmark.com_id, company.com_name, company.com_img
        FROM bookmark
        JOIN company ON bookmark.com_id = company.com_id
        WHERE bookmark.user_idx = #{sIdx}
        ORDER BY com_name ASC
	</select>

	<!-- 북마크 삭제하기 - DELETE -->
	<delete id="deleteBookmark" >
        DELETE FROM bookmark
        WHERE com_id = #{com_id}
    </delete>

	<!-- 더보기 페이지 북마크 삭제하기 - DELETE -->
	<delete id="deleteBookmark2" >
        DELETE FROM bookmark
        WHERE com_id = #{com_id}
    </delete>
    
    <!-- 방문한 가게 조회 - SELECT -->
    <select id="selectVisitedShop" resultType="mypage">
	    SELECT mv.com_name, mv.com_id, ANY_VALUE(c.com_address) as com_address -- GROUP_CONCAT 함수는 중복된 값을 다 포함하여 문자열을 생성하기 때문에, 동일한 가게 이름에 대해 여러 주소가 존재하는 경우 그 모든 주소를 문자열로 반환했음. 가게당 주소가 한번 나올 수 있도록 ANY_VALUE 함수 사용
		FROM mypage_view mv
		JOIN company c ON mv.com_name = c.com_name
		WHERE mv.user_idx = #{userIdx} AND mv.res_status = 3
		GROUP BY mv.com_name, mv.com_id; -- 같은 가게는 하나로 묶기
    </select>
    
    <!-- 가게 신고하기 - INSERT -->
    <insert id="insertShopReport">
	  INSERT INTO report(com_id, report_reason, report_content)
	  VALUES (#{com_id}, #{report_reason}, #{report_content})
	</insert>
    
    <!-- 나의 리뷰 조회하기 - SELECT --> 
	<select id="selectMyReview" resultType="review">-- select는 resultType 필요!
	    SELECT r.review_num, r.com_id, r.review_update, c.com_name, r.review_content
	    FROM review r, company c  
	    WHERE r.user_id = #{sId} 
	    AND r.com_id = c.com_id
	    ORDER BY r.review_update DESC;
	</select>
	
	<!-- 포인트 조회하기 - SELECT -->
	<select id="selectShowPoint" resultType="point">
		SELECT point_date, point_category, point_value
		FROM point
		WHERE user_idx = #{user_idx}
	</select>
	
	<!-- 포인트 총점 - SELECT -->
	<select id="selectTotalPoint" resultType="int">
		SELECT SUM(point_value) 
		FROM point 
		WHERE user_idx = #{user_idx}
	</select>
	
</mapper>