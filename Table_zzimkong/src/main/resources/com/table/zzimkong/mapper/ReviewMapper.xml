<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.table.zzimkong.mapper.ReviewMapper">
	<!-- 리뷰 등록 작업 - INSERT -->
	<!-- 이미지 나머지 파일은 디폴트값 넣기 -->
	<insert id="insertReview"> 
	INSERT 
	INTO review
	VALUES (
	#{review_num}
	,#{user_id}
	,2 -- com_id
	,0
	,1
	,'0'
	,#{review_content}
	,#{review_score}
	,#{review_mood_interior}
	,#{review_mood_alone}
	,#{review_mood_large}
	,#{review_mood_meeting}
	,#{review_mood_view}
	,#{review_food_big}
	,#{review_food_deli}
	,#{review_food_cheap}
	,#{review_food_fresh}
	,#{review_food_healthy}
	,#{review_etc_kind}
	,#{review_etc_parking}
	,#{review_etc_toilet}
	,#{review_etc_fast}
	,#{review_etc_child}
	,#{review_no_keyword}
	,#{review_like}
	,0 
	,now()
	,#{review_img_1}
	,NULL
	,NULL
	,NULL
	,NULL
	,1
	)
	</insert>
	
	<!-- 업체이름 불러오기 -->
	<select id="selectCompanyName" parameterType="int" resultType="String">
	    SELECT com_name
	    FROM company
	    WHERE com_id = #{com_id}
	</select>
	
	<!-- 리뷰 갯수 -->
	<select id="countReview" resultType="int">
	    SELECT COUNT(*)
	    FROM review
	    WHERE com_id = #{com_id}
	</select>

	<!-- 별점 평균 -->
	<select id="averageReview" parameterType="int" resultType="double">
		SELECT ROUND(AVG(review_score)/2,2)
		FROM review
	    WHERE com_id = #{com_id}
	</select>
	
	<!-- 리뷰 리스트 -->
	<select id="allReviewList" parameterType="int" resultType="review">
	    SELECT * 
	    FROM review
	    WHERE com_id = #{com_id}
	    ORDER BY review_update DESC;
	</select>
	
	<!-- 리뷰 수정 뷰페이지-->
	<select id="modifyReview" parameterType="int" resultType="review">
	    SELECT * 
	    FROM review
	    WHERE review_num = #{review_num}
	</select>

	<!-- 글 삭제 - DELETE -->
	<delete id="removeReview" parameterType="int">
		DELETE FROM review
		WHERE review_num = #{review_num}
	</delete>
	
<!-- 		  Board_file1 = DB컬럼명 = review_img_1 -->
<!-- 		 file1 = file1 (= form태그내의 name속성값과 동일) -->
<!-- 		 fileName1 = fileName1 -->
		
	
	<!-- 일치하는 레코드 내의 파일명 삭제(널스트링으로 값 수정) - UPDATE -->
	<update id="updateReviewFile">
		UPDATE review
		SET 
			review_img_1 = CASE WHEN review_img_1 = #{review_img_1} THEN '' ELSE review_img_1 END
		WHERE
			review_num = #{review_num}	
	</update>
	
	<!-- 리뷰 수정(UPDATE) -->
	<update id="updateReview" parameterType="com.table.zzimkong.vo.ReviewVO">
	    UPDATE review
	    SET
	        <if test="user_id != null"> user_id = #{user_id}</if>
	        <if test="review_content != null">, review_content = #{review_content}</if>
	        <if test="review_score != null">, review_score = #{review_score}</if>
	        <if test="review_mood_interior != null">, review_mood_interior = #{review_mood_interior}</if>
	        <if test="review_mood_alone != null">, review_mood_alone = #{review_mood_alone}</if>
	        <if test="review_mood_large != null">, review_mood_large = #{review_mood_large}</if>
	        <if test="review_mood_meeting != null">, review_mood_meeting = #{review_mood_meeting}</if>
	        <if test="review_mood_view != null">, review_mood_view = #{review_mood_view}</if>
	        <if test="review_food_big != null">, review_food_big = #{review_food_big}</if>
	        <if test="review_food_deli != null">, review_food_deli = #{review_food_deli}</if>
	        <if test="review_food_cheap != null">, review_food_cheap = #{review_food_cheap}</if>
	        <if test="review_food_fresh != null">, review_food_fresh = #{review_food_fresh}</if>
	        <if test="review_food_healthy != null">, review_food_healthy = #{review_food_healthy}</if>
	        <if test="review_etc_kind != null">, review_etc_kind = #{review_etc_kind}</if>
	        <if test="review_etc_parking != null">, review_etc_parking = #{review_etc_parking}</if>
	        <if test="review_etc_toilet != null">, review_etc_toilet = #{review_etc_toilet}</if>
	        <if test="review_etc_fast != null">, review_etc_fast = #{review_etc_fast}</if>
	        <if test="review_etc_child != null">, review_etc_child = #{review_etc_child}</if>
	        <if test="review_no_keyword != null">, review_no_keyword = #{review_no_keyword}</if>
	        <if test="review_img_1 != null">, review_img_1 = #{review_img_1}</if>
	        <if test="review_like != null">, review_like = #{review_like}</if>
	    WHERE review_num = #{review_num}
	</update>
	
	<!-- 리뷰 내용 가져오기 -->
	<select id="getReview" parameterType="int" resultType="review">
		SELECT *
		FROM review
		WHERE review_num = #{review_num}
	</select>

	<!-- 이런 점이 좋았어요 -->
	<select id="countReviewsByComId" resultType="reviewcount">
	    SELECT
	        com_id,
	        SUM(review_mood_interior) as review_mood_interior,
	        SUM(review_mood_alone) as review_mood_alone,
	        SUM(review_mood_large) as review_mood_large,
	        SUM(review_mood_meeting) as review_mood_meeting,
	        SUM(review_mood_view) as review_mood_view,
	        SUM(review_food_big) as review_food_big,
	        SUM(review_food_deli) as review_food_deli,
	        SUM(review_food_cheap) as review_food_cheap,
	        SUM(review_food_fresh) as review_food_fresh,
	        SUM(review_food_healthy) as review_food_healthy,
	        SUM(review_etc_kind) as review_etc_kind,
	        SUM(review_etc_parking) as review_etc_parking,
	        SUM(review_etc_toilet) as review_etc_toilet,
	        SUM(review_etc_fast) as review_etc_fast,
	        SUM(review_etc_child) as review_etc_child,
	        SUM(review_no_keyword) as review_no_keyword
	    FROM review
	    WHERE com_id = #{com_id}
	    GROUP BY com_id
	</select>

	<!-- 리뷰 정렬 -->
	<select id="selectReviewsByNewest" parameterType="int" resultType="review">
    	SELECT * 
    	FROM review 
    	WHERE com_id = #{com_id} 
    	ORDER BY review_date DESC
	</select>
	
	<select id="selectReviewsByHighestScore" parameterType="int" resultType="review">
	    SELECT * 
	    FROM review 
	    WHERE com_id = #{com_id} 
	    ORDER BY review_score DESC
	</select>

	<select id="selectReviewsByLowestScore" parameterType="int" resultType="review">
	    SELECT * 
	    FROM review 
	    WHERE com_id = #{com_id} 
	    ORDER BY review_score ASC
	</select>
	
	<!-- 리뷰 정렬(최신순|별점높은순|별점낮은순 ~ 사진/영상 리뷰만 보기) -->
		<select id="getSortedReviews" resultType="review">
	    SELECT * 
	    FROM review
	    WHERE com_id = #{comId}
	    <if test="photoOnly">
	        AND review_img_1 IS NOT NULL
	    </if>
	    <if test="menuName != null">
   			AND review_content LIKE CONCAT('%', #{menuName}, '%')
   		</if>
	    <choose>
	        <when test="sortType == 'newest'">
	            ORDER BY review_update DESC
	        </when>
	        <when test="sortType == 'highest'">
	            ORDER BY review_score DESC, review_update DESC
	        </when>
	        <when test="sortType == 'lowest'">
	            ORDER BY review_score ASC, review_update DESC
	        </when>
	        <when test="sortType == 'likes'">
	            ORDER BY likes_count DESC, review_update DESC
	        </when>
	        <otherwise>
	            ORDER BY review_update DESC
	        </otherwise>
	    </choose>
	</select>
	
	
	<!-- 메뉴 이름으로 리뷰 필터링 -->
	<select id="selectReviewsByMenuName" parameterType="map" resultType="review">
	    SELECT *
	    FROM review
	    WHERE com_id = #{comId}
	    AND review_content LIKE CONCAT('%', #{menuName}, '%')
	    ORDER BY review_update DESC
	</select>
	
	<!-- 메뉴이름 불러오기  -->
	<select id="selectReviewMenu" parameterType="int" resultType="String">
	    SELECT menu_name 
	    FROM menu 
		WHERE com_id = #{com_id} 
	</select>
	
	<!-- 키워드 검색 -->
	<select id="selectReviewsByCategory" parameterType="review" resultType="review">
	    <choose>
        	<when test="category == 'taste'">
        	 SELECT * FROM review
	         WHERE com_id = #{com_id} 
	         AND (
	         	review_content LIKE '%추천%'
	                OR review_content LIKE '%맛%'
	                OR review_content LIKE '%매콤%'
	                OR review_content LIKE '%달달%'
	                OR review_content LIKE '%싱겁%'
	                OR review_content LIKE '%단%'
	                OR review_content LIKE '%신맛%')
	         ORDER BY review_update DESC       
      	  </when>
        <when test="category == 'satisfaction'">
            SELECT * FROM review
			WHERE com_id = #{com_id} 
             AND (
                review_content LIKE '%좋은%'
	                OR review_content LIKE '%나쁜%'
	                OR review_content LIKE '%최고%'
	                OR review_content LIKE '%만족%'
	                OR review_content LIKE '%좋았%'
	                OR review_content LIKE '%추천%'
	                OR review_content LIKE '%친절%')
	         ORDER BY review_update DESC       
	                
        </when>
			<when test="category == 'service'">
				SELECT * FROM review
				WHERE com_id = #{com_id} 
				AND	( 
				review_content LIKE '%친절%'
					OR review_content LIKE '%나쁜%'
					OR review_content LIKE '%좋은%'
					OR review_content LIKE '%불친절%')
				ORDER BY review_update DESC       
					
			</when>	
			<when test="category == 'waiting'">
				SELECT * FROM review
				WHERE com_id = #{com_id} 
				AND( 
				review_content LIKE '%대기%'
					OR review_content LIKE '%줄%'
					OR review_content LIKE '%웨이팅%'
					OR review_content LIKE '%회전%'
					OR review_content LIKE '%브레이크%'
					OR review_content LIKE '%시간%')
				ORDER BY review_update DESC       
					
			</when>	
			<when test="category == 'quantity'">
				SELECT * FROM review
				WHERE com_id = #{com_id} 
				AND(
				review_content LIKE '%양%'
					OR review_content LIKE '%많은%'
					OR review_content LIKE '%적은%'
					OR review_content LIKE '%배부%'
					OR review_content LIKE '%배고%')
				ORDER BY review_update DESC       
					
			</when>	
		</choose>
	</select>
	
	<!-- 신고 시 회원정보 불러오기(메일/폰번호) -->
	<select id="findUserById" resultType="com.table.zzimkong.vo.MemberVO">
		SELECT user_phone, user_email
		FROM user
		WHERE user_id = #{user_id}
	</select>
	
	<!-- 리뷰 신고 -->
	<insert id="insertReviewReport">
	INSERT
	INTO report(
	 review_num,
	 user_id,
	 report_reason,
	 report_person,
	 report_content,
	 user_email,
	 user_phone,
	 com_id,
	 report_category,
	 report_status)
      	VALUES (
	#{review_num},
	#{user_id},
	#{report_reason},
	#{report_person},
	#{report_content},
	#{user_phone},
	#{user_email},
	#{com_id},
	false, 
	1
	)
	</insert>
	<!-- report_category =>  false : 0 / true : 1 -->
	
</mapper>
	
	